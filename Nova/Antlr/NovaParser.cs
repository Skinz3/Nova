//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NovaParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class NovaParser : Parser {
	public const int
		USING=1, CLASS=2, STRUCT=3, PUBLIC=4, PRIVATE=5, UNIT=6, DOUBLE=7, FLOAT=8, 
		INT=9, SHORT=10, STRING=11, BOOLEAN=12, CHAR=13, BYTE=14, LONG=15, FOR=16, 
		IF=17, WHILE=18, ELSE=19, RETURN=20, NEW=21, NATIVE=22, ASSIGN=23, ADD=24, 
		SUB=25, MUL=26, DIV=27, LE=28, GE=29, GT=30, LT=31, EQUAL=32, NOTEQUAL=33, 
		AND=34, OR=35, LPAREN=36, RPAREN=37, LBRACE=38, RBRACE=39, LBRACK=40, 
		RBRACK=41, COMMA=42, DOT=43, SEMI=44, IDENTIFIER=45, WS=46, COMMENT=47, 
		LINE_COMMENT=48, DECIMAL_LITERAL=49, HEX_LITERAL=50, OCT_LITERAL=51, BINARY_LITERAL=52, 
		FLOAT_LITERAL=53, HEX_FLOAT_LITERAL=54, BOOL_LITERAL=55, CHAR_LITERAL=56, 
		STRING_LITERAL=57, NULL_LITERAL=58;
	public const int
		RULE_compilationUnit = 0, RULE_importDeclaration = 1, RULE_typeDeclaration = 2, 
		RULE_classDeclaration = 3, RULE_structDeclaration = 4, RULE_classBody = 5, 
		RULE_memberDeclaration = 6, RULE_modifier = 7, RULE_classModifier = 8, 
		RULE_fieldDeclaration = 9, RULE_variableDeclarator = 10, RULE_variableInitializer = 11, 
		RULE_variableDeclaratorId = 12, RULE_typeType = 13, RULE_primitiveType = 14, 
		RULE_expression = 15, RULE_methodDeclaration = 16, RULE_typeTypeOrUnit = 17, 
		RULE_formalParameters = 18, RULE_formalParameterList = 19, RULE_formalParameter = 20, 
		RULE_lastFormalParameter = 21, RULE_constructorDeclaration = 22, RULE_methodBody = 23, 
		RULE_block = 24, RULE_blockStatement = 25, RULE_localVariableDeclaration = 26, 
		RULE_statement = 27, RULE_forStatement = 28, RULE_parExpression = 29, 
		RULE_forControl = 30, RULE_forInit = 31, RULE_expressionList = 32, RULE_primary = 33, 
		RULE_literal = 34, RULE_integerLiteral = 35, RULE_floatLiteral = 36, RULE_methodCall = 37, 
		RULE_nativeCall = 38, RULE_creator = 39, RULE_createdName = 40, RULE_classCreatorRest = 41, 
		RULE_arguments = 42;
	public static readonly string[] ruleNames = {
		"compilationUnit", "importDeclaration", "typeDeclaration", "classDeclaration", 
		"structDeclaration", "classBody", "memberDeclaration", "modifier", "classModifier", 
		"fieldDeclaration", "variableDeclarator", "variableInitializer", "variableDeclaratorId", 
		"typeType", "primitiveType", "expression", "methodDeclaration", "typeTypeOrUnit", 
		"formalParameters", "formalParameterList", "formalParameter", "lastFormalParameter", 
		"constructorDeclaration", "methodBody", "block", "blockStatement", "localVariableDeclaration", 
		"statement", "forStatement", "parExpression", "forControl", "forInit", 
		"expressionList", "primary", "literal", "integerLiteral", "floatLiteral", 
		"methodCall", "nativeCall", "creator", "createdName", "classCreatorRest", 
		"arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'using'", "'class'", "'struct'", "'public'", "'private'", "'unit'", 
		"'double'", "'float'", "'int'", "'short'", "'string'", "'bool'", "'char'", 
		"'byte'", "'long'", "'for'", "'if'", "'while'", "'else'", "'return'", 
		"'->'", "'~'", "'='", "'+'", "'-'", "'*'", "'/'", "'<='", "'>='", "'>'", 
		"'<'", "'=='", "'!='", "'&&'", "'||'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "','", "'.'", "';'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "USING", "CLASS", "STRUCT", "PUBLIC", "PRIVATE", "UNIT", "DOUBLE", 
		"FLOAT", "INT", "SHORT", "STRING", "BOOLEAN", "CHAR", "BYTE", "LONG", 
		"FOR", "IF", "WHILE", "ELSE", "RETURN", "NEW", "NATIVE", "ASSIGN", "ADD", 
		"SUB", "MUL", "DIV", "LE", "GE", "GT", "LT", "EQUAL", "NOTEQUAL", "AND", 
		"OR", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "COMMA", 
		"DOT", "SEMI", "IDENTIFIER", "WS", "COMMENT", "LINE_COMMENT", "DECIMAL_LITERAL", 
		"HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", 
		"BOOL_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "NULL_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NovaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public NovaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(NovaParser.Eof, 0); }
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==USING) {
				{
				{
				State = 86; importDeclaration();
				}
				}
				State = 91;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 95;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STRUCT) | (1L << SEMI))) != 0)) {
				{
				{
				State = 92; typeDeclaration();
				}
				}
				State = 97;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 98; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(NovaParser.USING, 0); }
		public ITerminalNode LT() { return GetToken(NovaParser.LT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public ITerminalNode GT() { return GetToken(NovaParser.GT, 0); }
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_importDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(USING);
			State = 101; Match(LT);
			State = 102; Match(IDENTIFIER);
			State = 103; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(NovaParser.SEMI, 0); }
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_typeDeclaration);
		try {
			State = 110;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CLASS:
			case STRUCT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case CLASS:
					{
					State = 105; classDeclaration();
					}
					break;
				case STRUCT:
					{
					State = 106; structDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(NovaParser.CLASS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_classDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(CLASS);
			State = 113; Match(IDENTIFIER);
			State = 114; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(NovaParser.STRUCT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_structDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(STRUCT);
			State = 117; Match(IDENTIFIER);
			State = 118; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(LBRACE);
			State = 124;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PUBLIC || _la==PRIVATE) {
				{
				{
				State = 121; memberDeclaration();
				}
				}
				State = 126;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 127; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_memberDeclaration);
		try {
			State = 138;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129; modifier();
				State = 130; methodDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; modifier();
				State = 133; fieldDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 135; modifier();
				State = 136; constructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public ClassModifierContext classModifier() {
			return GetRuleContext<ClassModifierContext>(0);
		}
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; classModifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(NovaParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(NovaParser.PRIVATE, 0); }
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_classModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_la = _input.La(1);
			if ( !(_la==PUBLIC || _la==PRIVATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; typeType();
			State = 145; variableDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(NovaParser.ASSIGN, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; variableDeclaratorId();
			State = 150;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 148; Match(ASSIGN);
				State = 149; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_variableInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_variableDeclaratorId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterTypeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitTypeType(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeContext typeType() {
		TypeTypeContext _localctx = new TypeTypeContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_typeType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				{
				State = 156; Match(IDENTIFIER);
				}
				break;
			case DOUBLE:
			case FLOAT:
			case INT:
			case SHORT:
			case STRING:
			case BOOLEAN:
			case CHAR:
			case BYTE:
			case LONG:
				{
				State = 157; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(NovaParser.BOOLEAN, 0); }
		public ITerminalNode CHAR() { return GetToken(NovaParser.CHAR, 0); }
		public ITerminalNode BYTE() { return GetToken(NovaParser.BYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(NovaParser.SHORT, 0); }
		public ITerminalNode INT() { return GetToken(NovaParser.INT, 0); }
		public ITerminalNode STRING() { return GetToken(NovaParser.STRING, 0); }
		public ITerminalNode LONG() { return GetToken(NovaParser.LONG, 0); }
		public ITerminalNode FLOAT() { return GetToken(NovaParser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(NovaParser.DOUBLE, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << SHORT) | (1L << STRING) | (1L << BOOLEAN) | (1L << CHAR) | (1L << BYTE) | (1L << LONG))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken prefix;
		public IToken bop;
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public NativeCallContext nativeCall() {
			return GetRuleContext<NativeCallContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(NovaParser.NEW, 0); }
		public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 163; primary();
				}
				break;

			case 2:
				{
				State = 164; nativeCall();
				}
				break;

			case 3:
				{
				State = 165; methodCall();
				}
				break;

			case 4:
				{
				State = 166; Match(NEW);
				State = 167; creator();
				}
				break;

			case 5:
				{
				State = 168;
				_localctx.prefix = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ADD || _la==SUB) ) {
					_localctx.prefix = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 169; expression(9);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 212;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 210;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 172;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 173;
						_localctx.bop = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MUL || _la==DIV) ) {
							_localctx.bop = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 174; expression(9);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 175;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 176;
						_localctx.bop = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.bop = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 177; expression(8);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 178;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 186;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
						case 1:
							{
							State = 179; Match(LT);
							State = 180; Match(LT);
							}
							break;

						case 2:
							{
							State = 181; Match(GT);
							State = 182; Match(GT);
							State = 183; Match(GT);
							}
							break;

						case 3:
							{
							State = 184; Match(GT);
							State = 185; Match(GT);
							}
							break;
						}
						State = 188; expression(7);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 189;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 190;
						_localctx.bop = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LE) | (1L << GE) | (1L << GT) | (1L << LT))) != 0)) ) {
							_localctx.bop = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 191; expression(6);
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 192;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 193;
						_localctx.bop = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
							_localctx.bop = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 194; expression(5);
						}
						break;

					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 195;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 196; _localctx.bop = Match(AND);
						State = 197; expression(4);
						}
						break;

					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 198;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 199; _localctx.bop = Match(OR);
						State = 200; expression(3);
						}
						break;

					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 201;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 202; Match(ASSIGN);
						State = 203; expression(1);
						}
						break;

					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 204;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 205; _localctx.bop = Match(DOT);
						State = 208;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
						case 1:
							{
							State = 206; Match(IDENTIFIER);
							}
							break;

						case 2:
							{
							State = 207; methodCall();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 214;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public TypeTypeOrUnitContext typeTypeOrUnit() {
			return GetRuleContext<TypeTypeOrUnitContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ITerminalNode[] LBRACK() { return GetTokens(NovaParser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(NovaParser.LBRACK, i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(NovaParser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(NovaParser.RBRACK, i);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; typeTypeOrUnit();
			State = 216; Match(IDENTIFIER);
			State = 217; formalParameters();
			State = 222;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 218; Match(LBRACK);
				State = 219; Match(RBRACK);
				}
				}
				State = 224;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 225; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeOrUnitContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode UNIT() { return GetToken(NovaParser.UNIT, 0); }
		public TypeTypeOrUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTypeOrUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterTypeTypeOrUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitTypeTypeOrUnit(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeOrUnitContext typeTypeOrUnit() {
		TypeTypeOrUnitContext _localctx = new TypeTypeOrUnitContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_typeTypeOrUnit);
		try {
			State = 229;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DOUBLE:
			case FLOAT:
			case INT:
			case SHORT:
			case STRING:
			case BOOLEAN:
			case CHAR:
			case BYTE:
			case LONG:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227; typeType();
				}
				break;
			case UNIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; Match(UNIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(LPAREN);
			State = 233;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << SHORT) | (1L << STRING) | (1L << BOOLEAN) | (1L << CHAR) | (1L << BYTE) | (1L << LONG) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 232; formalParameterList();
				}
			}

			State = 235; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 250;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237; formalParameter();
				State = 242;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 238; Match(COMMA);
						State = 239; formalParameter();
						}
						} 
					}
					State = 244;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
				}
				State = 247;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 245; Match(COMMA);
					State = 246; lastFormalParameter();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_formalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; typeType();
			State = 253; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_lastFormalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; typeType();
			State = 256; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public BlockContext constructorBody;
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_constructorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; Match(NEW);
			State = 259; Match(IDENTIFIER);
			State = 260; formalParameters();
			State = 261; _localctx.constructorBody = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(LBRACE);
			State = 269;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << SHORT) | (1L << STRING) | (1L << BOOLEAN) | (1L << CHAR) | (1L << BYTE) | (1L << LONG) | (1L << FOR) | (1L << IF) | (1L << WHILE) | (1L << RETURN) | (1L << NEW) | (1L << NATIVE) | (1L << ADD) | (1L << SUB) | (1L << LPAREN) | (1L << LBRACE) | (1L << IDENTIFIER) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL))) != 0)) {
				{
				{
				State = 266; blockStatement();
				}
				}
				State = 271;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 272; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_blockStatement);
		try {
			State = 276;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 274; localVariableDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_localVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; typeType();
			State = 279; variableDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext blockLabel;
		public ExpressionContext statementExpression;
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode IF() { return GetToken(NovaParser.IF, 0); }
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(NovaParser.ELSE, 0); }
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(NovaParser.WHILE, 0); }
		public ITerminalNode RETURN() { return GetToken(NovaParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_statement);
		try {
			State = 299;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 281; _localctx.blockLabel = block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282; Match(IF);
				State = 283; parExpression();
				State = 284; statement();
				State = 287;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
				case 1:
					{
					State = 285; Match(ELSE);
					State = 286; statement();
					}
					break;
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 289; forStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 290; Match(WHILE);
				State = 291; parExpression();
				State = 292; statement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 294; Match(RETURN);
				State = 296;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
				case 1:
					{
					State = 295; expression(0);
					}
					break;
				}
				}
				break;
			case NEW:
			case NATIVE:
			case ADD:
			case SUB:
			case LPAREN:
			case IDENTIFIER:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 298; _localctx.statementExpression = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(NovaParser.FOR, 0); }
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(FOR);
			State = 302; Match(LPAREN);
			State = 303; forControl();
			State = 304; Match(RPAREN);
			State = 305; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(LPAREN);
			State = 308; expression(0);
			State = 309; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ExpressionContext forCond;
		public ExpressionListContext forUpdate;
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_forControl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; forInit();
			State = 312; Match(SEMI);
			State = 313; _localctx.forCond = expression(0);
			State = 314; Match(SEMI);
			State = 316;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << NATIVE) | (1L << ADD) | (1L << SUB) | (1L << LPAREN) | (1L << IDENTIFIER) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL))) != 0)) {
				{
				State = 315; _localctx.forUpdate = expressionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_forInit);
		try {
			State = 320;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318; localVariableDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319; expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(NovaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NovaParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; expression(0);
			State = 327;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 323; Match(COMMA);
				State = 324; expression(0);
				}
				}
				State = 329;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_primary);
		try {
			State = 336;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 330; Match(LPAREN);
				State = 331; expression(0);
				State = 332; Match(RPAREN);
				}
				break;
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334; literal();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 335; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public FloatLiteralContext floatLiteral() {
			return GetRuleContext<FloatLiteralContext>(0);
		}
		public ITerminalNode CHAR_LITERAL() { return GetToken(NovaParser.CHAR_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(NovaParser.STRING_LITERAL, 0); }
		public ITerminalNode BOOL_LITERAL() { return GetToken(NovaParser.BOOL_LITERAL, 0); }
		public ITerminalNode NULL_LITERAL() { return GetToken(NovaParser.NULL_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_literal);
		try {
			State = 344;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338; integerLiteral();
				}
				break;
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339; floatLiteral();
				}
				break;
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 340; Match(CHAR_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 341; Match(STRING_LITERAL);
				}
				break;
			case BOOL_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 342; Match(BOOL_LITERAL);
				}
				break;
			case NULL_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 343; Match(NULL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(NovaParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode HEX_LITERAL() { return GetToken(NovaParser.HEX_LITERAL, 0); }
		public ITerminalNode OCT_LITERAL() { return GetToken(NovaParser.OCT_LITERAL, 0); }
		public ITerminalNode BINARY_LITERAL() { return GetToken(NovaParser.BINARY_LITERAL, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_integerLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatLiteralContext : ParserRuleContext {
		public ITerminalNode FLOAT_LITERAL() { return GetToken(NovaParser.FLOAT_LITERAL, 0); }
		public ITerminalNode HEX_FLOAT_LITERAL() { return GetToken(NovaParser.HEX_FLOAT_LITERAL, 0); }
		public FloatLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
	}

	[RuleVersion(0)]
	public FloatLiteralContext floatLiteral() {
		FloatLiteralContext _localctx = new FloatLiteralContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_floatLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			_la = _input.La(1);
			if ( !(_la==FLOAT_LITERAL || _la==HEX_FLOAT_LITERAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(IDENTIFIER);
			State = 351; Match(LPAREN);
			State = 353;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << NATIVE) | (1L << ADD) | (1L << SUB) | (1L << LPAREN) | (1L << IDENTIFIER) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL))) != 0)) {
				{
				State = 352; expressionList();
				}
			}

			State = 355; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public NativeCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterNativeCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitNativeCall(this);
		}
	}

	[RuleVersion(0)]
	public NativeCallContext nativeCall() {
		NativeCallContext _localctx = new NativeCallContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_nativeCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; Match(NATIVE);
			State = 358; Match(IDENTIFIER);
			State = 359; Match(LPAREN);
			State = 361;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << NATIVE) | (1L << ADD) | (1L << SUB) | (1L << LPAREN) | (1L << IDENTIFIER) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL))) != 0)) {
				{
				State = 360; expressionList();
				}
			}

			State = 363; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterCreator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitCreator(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_creator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; createdName();
			{
			State = 366; classCreatorRest();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterCreatedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitCreatedName(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_createdName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterClassCreatorRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitClassCreatorRest(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; Match(LPAREN);
			State = 374;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << NATIVE) | (1L << ADD) | (1L << SUB) | (1L << LPAREN) | (1L << IDENTIFIER) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL))) != 0)) {
				{
				State = 373; expressionList();
				}
			}

			State = 376; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 8);

		case 1: return Precpred(_ctx, 7);

		case 2: return Precpred(_ctx, 6);

		case 3: return Precpred(_ctx, 5);

		case 4: return Precpred(_ctx, 4);

		case 5: return Precpred(_ctx, 3);

		case 6: return Precpred(_ctx, 2);

		case 7: return Precpred(_ctx, 1);

		case 8: return Precpred(_ctx, 13);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3<\x17D\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x3\x2\a\x2Z\n\x2\f\x2\xE\x2]\v\x2\x3\x2\a\x2`\n\x2\f\x2"+
		"\xE\x2\x63\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4"+
		"\x5\x4n\n\x4\x3\x4\x5\x4q\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\a\x3\a\a\a}\n\a\f\a\xE\a\x80\v\a\x3\a\x3\a\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x8D\n\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3"+
		"\v\x3\v\x3\f\x3\f\x3\f\x5\f\x99\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x5\xF\xA1\n\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x5\x11\xAD\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xBD"+
		"\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x5\x11\xD3\n\x11\a\x11\xD5\n\x11\f\x11\xE\x11\xD8\v\x11\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\xDF\n\x12\f\x12\xE\x12\xE2\v\x12\x3"+
		"\x12\x3\x12\x3\x13\x3\x13\x5\x13\xE8\n\x13\x3\x14\x3\x14\x5\x14\xEC\n"+
		"\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\a\x15\xF3\n\x15\f\x15\xE\x15\xF6"+
		"\v\x15\x3\x15\x3\x15\x5\x15\xFA\n\x15\x3\x15\x5\x15\xFD\n\x15\x3\x16\x3"+
		"\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\x3\x1A\x3\x1A\a\x1A\x10E\n\x1A\f\x1A\xE\x1A\x111\v\x1A\x3"+
		"\x1A\x3\x1A\x3\x1B\x3\x1B\x5\x1B\x117\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x122\n\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x12B\n\x1D\x3\x1D\x5\x1D\x12E"+
		"\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3 \x3 \x3 \x3 \x3 \x5 \x13F\n \x3!\x3!\x5!\x143\n!\x3\"\x3\""+
		"\x3\"\a\"\x148\n\"\f\"\xE\"\x14B\v\"\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x153"+
		"\n#\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x15B\n$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3\'"+
		"\x5\'\x164\n\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x5(\x16C\n(\x3(\x3(\x3)\x3)\x3"+
		")\x3*\x3*\x3+\x3+\x3,\x3,\x5,\x179\n,\x3,\x3,\x3,\x2\x2\x3 -\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2"+
		"\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2"+
		"R\x2T\x2V\x2\x2\n\x3\x2\x6\a\x3\x2\t\x11\x3\x2\x1A\x1B\x3\x2\x1C\x1D\x3"+
		"\x2\x1E!\x3\x2\"#\x3\x2\x33\x36\x3\x2\x37\x38\x186\x2[\x3\x2\x2\x2\x4"+
		"\x66\x3\x2\x2\x2\x6p\x3\x2\x2\x2\br\x3\x2\x2\x2\nv\x3\x2\x2\x2\fz\x3\x2"+
		"\x2\x2\xE\x8C\x3\x2\x2\x2\x10\x8E\x3\x2\x2\x2\x12\x90\x3\x2\x2\x2\x14"+
		"\x92\x3\x2\x2\x2\x16\x95\x3\x2\x2\x2\x18\x9A\x3\x2\x2\x2\x1A\x9C\x3\x2"+
		"\x2\x2\x1C\xA0\x3\x2\x2\x2\x1E\xA2\x3\x2\x2\x2 \xAC\x3\x2\x2\x2\"\xD9"+
		"\x3\x2\x2\x2$\xE7\x3\x2\x2\x2&\xE9\x3\x2\x2\x2(\xFC\x3\x2\x2\x2*\xFE\x3"+
		"\x2\x2\x2,\x101\x3\x2\x2\x2.\x104\x3\x2\x2\x2\x30\x109\x3\x2\x2\x2\x32"+
		"\x10B\x3\x2\x2\x2\x34\x116\x3\x2\x2\x2\x36\x118\x3\x2\x2\x2\x38\x12D\x3"+
		"\x2\x2\x2:\x12F\x3\x2\x2\x2<\x135\x3\x2\x2\x2>\x139\x3\x2\x2\x2@\x142"+
		"\x3\x2\x2\x2\x42\x144\x3\x2\x2\x2\x44\x152\x3\x2\x2\x2\x46\x15A\x3\x2"+
		"\x2\x2H\x15C\x3\x2\x2\x2J\x15E\x3\x2\x2\x2L\x160\x3\x2\x2\x2N\x167\x3"+
		"\x2\x2\x2P\x16F\x3\x2\x2\x2R\x172\x3\x2\x2\x2T\x174\x3\x2\x2\x2V\x176"+
		"\x3\x2\x2\x2XZ\x5\x4\x3\x2YX\x3\x2\x2\x2Z]\x3\x2\x2\x2[Y\x3\x2\x2\x2["+
		"\\\x3\x2\x2\x2\\\x61\x3\x2\x2\x2][\x3\x2\x2\x2^`\x5\x6\x4\x2_^\x3\x2\x2"+
		"\x2`\x63\x3\x2\x2\x2\x61_\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62\x64\x3\x2"+
		"\x2\x2\x63\x61\x3\x2\x2\x2\x64\x65\a\x2\x2\x3\x65\x3\x3\x2\x2\x2\x66g"+
		"\a\x3\x2\x2gh\a!\x2\x2hi\a/\x2\x2ij\a \x2\x2j\x5\x3\x2\x2\x2kn\x5\b\x5"+
		"\x2ln\x5\n\x6\x2mk\x3\x2\x2\x2ml\x3\x2\x2\x2nq\x3\x2\x2\x2oq\a.\x2\x2"+
		"pm\x3\x2\x2\x2po\x3\x2\x2\x2q\a\x3\x2\x2\x2rs\a\x4\x2\x2st\a/\x2\x2tu"+
		"\x5\f\a\x2u\t\x3\x2\x2\x2vw\a\x5\x2\x2wx\a/\x2\x2xy\x5\f\a\x2y\v\x3\x2"+
		"\x2\x2z~\a(\x2\x2{}\x5\xE\b\x2|{\x3\x2\x2\x2}\x80\x3\x2\x2\x2~|\x3\x2"+
		"\x2\x2~\x7F\x3\x2\x2\x2\x7F\x81\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x81\x82\a"+
		")\x2\x2\x82\r\x3\x2\x2\x2\x83\x84\x5\x10\t\x2\x84\x85\x5\"\x12\x2\x85"+
		"\x8D\x3\x2\x2\x2\x86\x87\x5\x10\t\x2\x87\x88\x5\x14\v\x2\x88\x8D\x3\x2"+
		"\x2\x2\x89\x8A\x5\x10\t\x2\x8A\x8B\x5.\x18\x2\x8B\x8D\x3\x2\x2\x2\x8C"+
		"\x83\x3\x2\x2\x2\x8C\x86\x3\x2\x2\x2\x8C\x89\x3\x2\x2\x2\x8D\xF\x3\x2"+
		"\x2\x2\x8E\x8F\x5\x12\n\x2\x8F\x11\x3\x2\x2\x2\x90\x91\t\x2\x2\x2\x91"+
		"\x13\x3\x2\x2\x2\x92\x93\x5\x1C\xF\x2\x93\x94\x5\x16\f\x2\x94\x15\x3\x2"+
		"\x2\x2\x95\x98\x5\x1A\xE\x2\x96\x97\a\x19\x2\x2\x97\x99\x5\x18\r\x2\x98"+
		"\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x17\x3\x2\x2\x2\x9A\x9B\x5 \x11"+
		"\x2\x9B\x19\x3\x2\x2\x2\x9C\x9D\a/\x2\x2\x9D\x1B\x3\x2\x2\x2\x9E\xA1\a"+
		"/\x2\x2\x9F\xA1\x5\x1E\x10\x2\xA0\x9E\x3\x2\x2\x2\xA0\x9F\x3\x2\x2\x2"+
		"\xA1\x1D\x3\x2\x2\x2\xA2\xA3\t\x3\x2\x2\xA3\x1F\x3\x2\x2\x2\xA4\xA5\b"+
		"\x11\x1\x2\xA5\xAD\x5\x44#\x2\xA6\xAD\x5N(\x2\xA7\xAD\x5L\'\x2\xA8\xA9"+
		"\a\x17\x2\x2\xA9\xAD\x5P)\x2\xAA\xAB\t\x4\x2\x2\xAB\xAD\x5 \x11\v\xAC"+
		"\xA4\x3\x2\x2\x2\xAC\xA6\x3\x2\x2\x2\xAC\xA7\x3\x2\x2\x2\xAC\xA8\x3\x2"+
		"\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xD6\x3\x2\x2\x2\xAE\xAF\f\n\x2\x2\xAF\xB0"+
		"\t\x5\x2\x2\xB0\xD5\x5 \x11\v\xB1\xB2\f\t\x2\x2\xB2\xB3\t\x4\x2\x2\xB3"+
		"\xD5\x5 \x11\n\xB4\xBC\f\b\x2\x2\xB5\xB6\a!\x2\x2\xB6\xBD\a!\x2\x2\xB7"+
		"\xB8\a \x2\x2\xB8\xB9\a \x2\x2\xB9\xBD\a \x2\x2\xBA\xBB\a \x2\x2\xBB\xBD"+
		"\a \x2\x2\xBC\xB5\x3\x2\x2\x2\xBC\xB7\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2"+
		"\xBD\xBE\x3\x2\x2\x2\xBE\xD5\x5 \x11\t\xBF\xC0\f\a\x2\x2\xC0\xC1\t\x6"+
		"\x2\x2\xC1\xD5\x5 \x11\b\xC2\xC3\f\x6\x2\x2\xC3\xC4\t\a\x2\x2\xC4\xD5"+
		"\x5 \x11\a\xC5\xC6\f\x5\x2\x2\xC6\xC7\a$\x2\x2\xC7\xD5\x5 \x11\x6\xC8"+
		"\xC9\f\x4\x2\x2\xC9\xCA\a%\x2\x2\xCA\xD5\x5 \x11\x5\xCB\xCC\f\x3\x2\x2"+
		"\xCC\xCD\a\x19\x2\x2\xCD\xD5\x5 \x11\x3\xCE\xCF\f\xF\x2\x2\xCF\xD2\a-"+
		"\x2\x2\xD0\xD3\a/\x2\x2\xD1\xD3\x5L\'\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD1\x3"+
		"\x2\x2\x2\xD3\xD5\x3\x2\x2\x2\xD4\xAE\x3\x2\x2\x2\xD4\xB1\x3\x2\x2\x2"+
		"\xD4\xB4\x3\x2\x2\x2\xD4\xBF\x3\x2\x2\x2\xD4\xC2\x3\x2\x2\x2\xD4\xC5\x3"+
		"\x2\x2\x2\xD4\xC8\x3\x2\x2\x2\xD4\xCB\x3\x2\x2\x2\xD4\xCE\x3\x2\x2\x2"+
		"\xD5\xD8\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7!\x3\x2"+
		"\x2\x2\xD8\xD6\x3\x2\x2\x2\xD9\xDA\x5$\x13\x2\xDA\xDB\a/\x2\x2\xDB\xE0"+
		"\x5&\x14\x2\xDC\xDD\a*\x2\x2\xDD\xDF\a+\x2\x2\xDE\xDC\x3\x2\x2\x2\xDF"+
		"\xE2\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE3\x3\x2"+
		"\x2\x2\xE2\xE0\x3\x2\x2\x2\xE3\xE4\x5\x30\x19\x2\xE4#\x3\x2\x2\x2\xE5"+
		"\xE8\x5\x1C\xF\x2\xE6\xE8\a\b\x2\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE6\x3\x2"+
		"\x2\x2\xE8%\x3\x2\x2\x2\xE9\xEB\a&\x2\x2\xEA\xEC\x5(\x15\x2\xEB\xEA\x3"+
		"\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xEE\a\'\x2\x2\xEE"+
		"\'\x3\x2\x2\x2\xEF\xF4\x5*\x16\x2\xF0\xF1\a,\x2\x2\xF1\xF3\x5*\x16\x2"+
		"\xF2\xF0\x3\x2\x2\x2\xF3\xF6\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3"+
		"\x2\x2\x2\xF5\xF9\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF7\xF8\a,\x2\x2\xF8"+
		"\xFA\x5,\x17\x2\xF9\xF7\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\xFD\x3\x2"+
		"\x2\x2\xFB\xFD\x5,\x17\x2\xFC\xEF\x3\x2\x2\x2\xFC\xFB\x3\x2\x2\x2\xFD"+
		")\x3\x2\x2\x2\xFE\xFF\x5\x1C\xF\x2\xFF\x100\x5\x1A\xE\x2\x100+\x3\x2\x2"+
		"\x2\x101\x102\x5\x1C\xF\x2\x102\x103\x5\x1A\xE\x2\x103-\x3\x2\x2\x2\x104"+
		"\x105\a\x17\x2\x2\x105\x106\a/\x2\x2\x106\x107\x5&\x14\x2\x107\x108\x5"+
		"\x32\x1A\x2\x108/\x3\x2\x2\x2\x109\x10A\x5\x32\x1A\x2\x10A\x31\x3\x2\x2"+
		"\x2\x10B\x10F\a(\x2\x2\x10C\x10E\x5\x34\x1B\x2\x10D\x10C\x3\x2\x2\x2\x10E"+
		"\x111\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x112"+
		"\x3\x2\x2\x2\x111\x10F\x3\x2\x2\x2\x112\x113\a)\x2\x2\x113\x33\x3\x2\x2"+
		"\x2\x114\x117\x5\x36\x1C\x2\x115\x117\x5\x38\x1D\x2\x116\x114\x3\x2\x2"+
		"\x2\x116\x115\x3\x2\x2\x2\x117\x35\x3\x2\x2\x2\x118\x119\x5\x1C\xF\x2"+
		"\x119\x11A\x5\x16\f\x2\x11A\x37\x3\x2\x2\x2\x11B\x12E\x5\x32\x1A\x2\x11C"+
		"\x11D\a\x13\x2\x2\x11D\x11E\x5<\x1F\x2\x11E\x121\x5\x38\x1D\x2\x11F\x120"+
		"\a\x15\x2\x2\x120\x122\x5\x38\x1D\x2\x121\x11F\x3\x2\x2\x2\x121\x122\x3"+
		"\x2\x2\x2\x122\x12E\x3\x2\x2\x2\x123\x12E\x5:\x1E\x2\x124\x125\a\x14\x2"+
		"\x2\x125\x126\x5<\x1F\x2\x126\x127\x5\x38\x1D\x2\x127\x12E\x3\x2\x2\x2"+
		"\x128\x12A\a\x16\x2\x2\x129\x12B\x5 \x11\x2\x12A\x129\x3\x2\x2\x2\x12A"+
		"\x12B\x3\x2\x2\x2\x12B\x12E\x3\x2\x2\x2\x12C\x12E\x5 \x11\x2\x12D\x11B"+
		"\x3\x2\x2\x2\x12D\x11C\x3\x2\x2\x2\x12D\x123\x3\x2\x2\x2\x12D\x124\x3"+
		"\x2\x2\x2\x12D\x128\x3\x2\x2\x2\x12D\x12C\x3\x2\x2\x2\x12E\x39\x3\x2\x2"+
		"\x2\x12F\x130\a\x12\x2\x2\x130\x131\a&\x2\x2\x131\x132\x5> \x2\x132\x133"+
		"\a\'\x2\x2\x133\x134\x5\x38\x1D\x2\x134;\x3\x2\x2\x2\x135\x136\a&\x2\x2"+
		"\x136\x137\x5 \x11\x2\x137\x138\a\'\x2\x2\x138=\x3\x2\x2\x2\x139\x13A"+
		"\x5@!\x2\x13A\x13B\a.\x2\x2\x13B\x13C\x5 \x11\x2\x13C\x13E\a.\x2\x2\x13D"+
		"\x13F\x5\x42\"\x2\x13E\x13D\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F?\x3"+
		"\x2\x2\x2\x140\x143\x5\x36\x1C\x2\x141\x143\x5\x42\"\x2\x142\x140\x3\x2"+
		"\x2\x2\x142\x141\x3\x2\x2\x2\x143\x41\x3\x2\x2\x2\x144\x149\x5 \x11\x2"+
		"\x145\x146\a,\x2\x2\x146\x148\x5 \x11\x2\x147\x145\x3\x2\x2\x2\x148\x14B"+
		"\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x43\x3\x2"+
		"\x2\x2\x14B\x149\x3\x2\x2\x2\x14C\x14D\a&\x2\x2\x14D\x14E\x5 \x11\x2\x14E"+
		"\x14F\a\'\x2\x2\x14F\x153\x3\x2\x2\x2\x150\x153\x5\x46$\x2\x151\x153\a"+
		"/\x2\x2\x152\x14C\x3\x2\x2\x2\x152\x150\x3\x2\x2\x2\x152\x151\x3\x2\x2"+
		"\x2\x153\x45\x3\x2\x2\x2\x154\x15B\x5H%\x2\x155\x15B\x5J&\x2\x156\x15B"+
		"\a:\x2\x2\x157\x15B\a;\x2\x2\x158\x15B\a\x39\x2\x2\x159\x15B\a<\x2\x2"+
		"\x15A\x154\x3\x2\x2\x2\x15A\x155\x3\x2\x2\x2\x15A\x156\x3\x2\x2\x2\x15A"+
		"\x157\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15A\x159\x3\x2\x2\x2\x15BG\x3"+
		"\x2\x2\x2\x15C\x15D\t\b\x2\x2\x15DI\x3\x2\x2\x2\x15E\x15F\t\t\x2\x2\x15F"+
		"K\x3\x2\x2\x2\x160\x161\a/\x2\x2\x161\x163\a&\x2\x2\x162\x164\x5\x42\""+
		"\x2\x163\x162\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2"+
		"\x165\x166\a\'\x2\x2\x166M\x3\x2\x2\x2\x167\x168\a\x18\x2\x2\x168\x169"+
		"\a/\x2\x2\x169\x16B\a&\x2\x2\x16A\x16C\x5\x42\"\x2\x16B\x16A\x3\x2\x2"+
		"\x2\x16B\x16C\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x16E\a\'\x2\x2\x16E"+
		"O\x3\x2\x2\x2\x16F\x170\x5R*\x2\x170\x171\x5T+\x2\x171Q\x3\x2\x2\x2\x172"+
		"\x173\a/\x2\x2\x173S\x3\x2\x2\x2\x174\x175\x5V,\x2\x175U\x3\x2\x2\x2\x176"+
		"\x178\a&\x2\x2\x177\x179\x5\x42\"\x2\x178\x177\x3\x2\x2\x2\x178\x179\x3"+
		"\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x17B\a\'\x2\x2\x17BW\x3\x2\x2\x2"+
		"\"[\x61mp~\x8C\x98\xA0\xAC\xBC\xD2\xD4\xD6\xE0\xE7\xEB\xF4\xF9\xFC\x10F"+
		"\x116\x121\x12A\x12D\x13E\x142\x149\x152\x15A\x163\x16B\x178";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
