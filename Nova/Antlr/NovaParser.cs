//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NovaParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class NovaParser : Parser {
	public const int
		USING=1, CLASS=2, STRUCT=3, PUBLIC=4, PRIVATE=5, PRIMITIVE=6, UNIT=7, 
		DOUBLE=8, FLOAT=9, INT=10, SHORT=11, STRING=12, BOOLEAN=13, CHAR=14, BYTE=15, 
		LONG=16, FOR=17, IF=18, WHILE=19, ELSE=20, RETURN=21, NEW=22, NATIVE=23, 
		ASSIGN=24, ADD=25, SUB=26, MUL=27, DIV=28, LE=29, GE=30, GT=31, LT=32, 
		EQUAL=33, NOTEQUAL=34, AND=35, OR=36, LPAREN=37, RPAREN=38, LBRACE=39, 
		RBRACE=40, LBRACK=41, RBRACK=42, COMMA=43, DOT=44, SEMI=45, NULL_LITERAL=46, 
		BOOL_LITERAL=47, IDENTIFIER=48, WS=49, COMMENT=50, LINE_COMMENT=51, DECIMAL_LITERAL=52, 
		HEX_LITERAL=53, OCT_LITERAL=54, BINARY_LITERAL=55, FLOAT_LITERAL=56, HEX_FLOAT_LITERAL=57, 
		CHAR_LITERAL=58, STRING_LITERAL=59;
	public const int
		RULE_compilationUnit = 0, RULE_importDeclaration = 1, RULE_fileName = 2, 
		RULE_typeDeclaration = 3, RULE_primitiveDeclaration = 4, RULE_classDeclaration = 5, 
		RULE_structDeclaration = 6, RULE_classBody = 7, RULE_memberDeclaration = 8, 
		RULE_modifier = 9, RULE_classModifier = 10, RULE_fieldDeclaration = 11, 
		RULE_variableDeclarator = 12, RULE_variableInitializer = 13, RULE_variableDeclaratorId = 14, 
		RULE_typeType = 15, RULE_primitiveTypeOrUnit = 16, RULE_primitiveType = 17, 
		RULE_expression = 18, RULE_methodDeclaration = 19, RULE_typeTypeOrUnit = 20, 
		RULE_formalParameters = 21, RULE_formalParameterList = 22, RULE_formalParameter = 23, 
		RULE_lastFormalParameter = 24, RULE_constructorDeclaration = 25, RULE_methodBody = 26, 
		RULE_block = 27, RULE_localVariableDeclaration = 28, RULE_statement = 29, 
		RULE_whileStatement = 30, RULE_returnStatement = 31, RULE_assignationStatement = 32, 
		RULE_statementExpression = 33, RULE_ifStatement = 34, RULE_forStatement = 35, 
		RULE_parExpression = 36, RULE_forControl = 37, RULE_expressionList = 38, 
		RULE_primary = 39, RULE_primaryIdentifier = 40, RULE_literal = 41, RULE_integerLiteral = 42, 
		RULE_floatLiteral = 43, RULE_methodCall = 44, RULE_constructorCall = 45, 
		RULE_nativeCall = 46, RULE_creator = 47, RULE_createdName = 48, RULE_classCreatorRest = 49, 
		RULE_arguments = 50;
	public static readonly string[] ruleNames = {
		"compilationUnit", "importDeclaration", "fileName", "typeDeclaration", 
		"primitiveDeclaration", "classDeclaration", "structDeclaration", "classBody", 
		"memberDeclaration", "modifier", "classModifier", "fieldDeclaration", 
		"variableDeclarator", "variableInitializer", "variableDeclaratorId", "typeType", 
		"primitiveTypeOrUnit", "primitiveType", "expression", "methodDeclaration", 
		"typeTypeOrUnit", "formalParameters", "formalParameterList", "formalParameter", 
		"lastFormalParameter", "constructorDeclaration", "methodBody", "block", 
		"localVariableDeclaration", "statement", "whileStatement", "returnStatement", 
		"assignationStatement", "statementExpression", "ifStatement", "forStatement", 
		"parExpression", "forControl", "expressionList", "primary", "primaryIdentifier", 
		"literal", "integerLiteral", "floatLiteral", "methodCall", "constructorCall", 
		"nativeCall", "creator", "createdName", "classCreatorRest", "arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'using'", "'class'", "'struct'", "'public'", "'private'", "'primitive'", 
		"'unit'", "'double'", "'float'", "'int'", "'short'", "'string'", "'bool'", 
		"'char'", "'byte'", "'long'", "'for'", "'if'", "'while'", "'else'", "'return'", 
		"'->'", "'~'", "'='", "'+'", "'-'", "'*'", "'/'", "'<='", "'>='", "'>'", 
		"'<'", "'=='", "'!='", "'&&'", "'||'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "','", "'.'", "';'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "USING", "CLASS", "STRUCT", "PUBLIC", "PRIVATE", "PRIMITIVE", "UNIT", 
		"DOUBLE", "FLOAT", "INT", "SHORT", "STRING", "BOOLEAN", "CHAR", "BYTE", 
		"LONG", "FOR", "IF", "WHILE", "ELSE", "RETURN", "NEW", "NATIVE", "ASSIGN", 
		"ADD", "SUB", "MUL", "DIV", "LE", "GE", "GT", "LT", "EQUAL", "NOTEQUAL", 
		"AND", "OR", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
		"COMMA", "DOT", "SEMI", "NULL_LITERAL", "BOOL_LITERAL", "IDENTIFIER", 
		"WS", "COMMENT", "LINE_COMMENT", "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", 
		"BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "CHAR_LITERAL", 
		"STRING_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NovaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public NovaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(NovaParser.Eof, 0); }
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==USING) {
				{
				{
				State = 102; importDeclaration();
				}
				}
				State = 107;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 111;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STRUCT) | (1L << PRIMITIVE))) != 0)) {
				{
				{
				State = 108; typeDeclaration();
				}
				}
				State = 113;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 114; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(NovaParser.USING, 0); }
		public ITerminalNode LT() { return GetToken(NovaParser.LT, 0); }
		public FileNameContext fileName() {
			return GetRuleContext<FileNameContext>(0);
		}
		public ITerminalNode GT() { return GetToken(NovaParser.GT, 0); }
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_importDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(USING);
			State = 117; Match(LT);
			State = 118; fileName();
			State = 119; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNameContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(NovaParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NovaParser.IDENTIFIER, i);
		}
		public FileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileName; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterFileName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitFileName(this);
		}
	}

	[RuleVersion(0)]
	public FileNameContext fileName() {
		FileNameContext _localctx = new FileNameContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_fileName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(IDENTIFIER);
			State = 122; Match(DOT);
			State = 123; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public PrimitiveDeclarationContext primitiveDeclaration() {
			return GetRuleContext<PrimitiveDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_typeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CLASS:
				{
				State = 125; classDeclaration();
				}
				break;
			case STRUCT:
				{
				State = 126; structDeclaration();
				}
				break;
			case PRIMITIVE:
				{
				State = 127; primitiveDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveDeclarationContext : ParserRuleContext {
		public ITerminalNode PRIMITIVE() { return GetToken(NovaParser.PRIMITIVE, 0); }
		public PrimitiveTypeOrUnitContext primitiveTypeOrUnit() {
			return GetRuleContext<PrimitiveTypeOrUnitContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public PrimitiveDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveDeclarationContext primitiveDeclaration() {
		PrimitiveDeclarationContext _localctx = new PrimitiveDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_primitiveDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(PRIMITIVE);
			State = 131; primitiveTypeOrUnit();
			State = 132; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(NovaParser.CLASS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_classDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(CLASS);
			State = 135; Match(IDENTIFIER);
			State = 136; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(NovaParser.STRUCT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_structDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(STRUCT);
			State = 139; Match(IDENTIFIER);
			State = 140; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(LBRACE);
			State = 146;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << NEW))) != 0)) {
				{
				{
				State = 143; memberDeclaration();
				}
				}
				State = 148;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 149; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_memberDeclaration);
		try {
			State = 158;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151; modifier();
				State = 152; methodDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154; modifier();
				State = 155; fieldDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 157; constructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public ClassModifierContext classModifier() {
			return GetRuleContext<ClassModifierContext>(0);
		}
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; classModifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(NovaParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(NovaParser.PRIVATE, 0); }
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_classModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			_la = _input.La(1);
			if ( !(_la==PUBLIC || _la==PRIVATE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; typeType();
			State = 165; variableDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(NovaParser.ASSIGN, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; variableDeclaratorId();
			State = 170;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 168; Match(ASSIGN);
				State = 169; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_variableInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_variableDeclaratorId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterTypeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitTypeType(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeContext typeType() {
		TypeTypeContext _localctx = new TypeTypeContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_typeType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				{
				State = 176; Match(IDENTIFIER);
				}
				break;
			case DOUBLE:
			case FLOAT:
			case INT:
			case SHORT:
			case STRING:
			case BOOLEAN:
			case CHAR:
			case BYTE:
			case LONG:
				{
				State = 177; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeOrUnitContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode UNIT() { return GetToken(NovaParser.UNIT, 0); }
		public PrimitiveTypeOrUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveTypeOrUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveTypeOrUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveTypeOrUnit(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeOrUnitContext primitiveTypeOrUnit() {
		PrimitiveTypeOrUnitContext _localctx = new PrimitiveTypeOrUnitContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_primitiveTypeOrUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DOUBLE:
			case FLOAT:
			case INT:
			case SHORT:
			case STRING:
			case BOOLEAN:
			case CHAR:
			case BYTE:
			case LONG:
				{
				State = 180; primitiveType();
				}
				break;
			case UNIT:
				{
				State = 181; Match(UNIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(NovaParser.BOOLEAN, 0); }
		public ITerminalNode CHAR() { return GetToken(NovaParser.CHAR, 0); }
		public ITerminalNode BYTE() { return GetToken(NovaParser.BYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(NovaParser.SHORT, 0); }
		public ITerminalNode INT() { return GetToken(NovaParser.INT, 0); }
		public ITerminalNode STRING() { return GetToken(NovaParser.STRING, 0); }
		public ITerminalNode LONG() { return GetToken(NovaParser.LONG, 0); }
		public ITerminalNode FLOAT() { return GetToken(NovaParser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(NovaParser.DOUBLE, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << SHORT) | (1L << STRING) | (1L << BOOLEAN) | (1L << CHAR) | (1L << BYTE) | (1L << LONG))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NtvCallContext : ExpressionContext {
		public NativeCallContext nativeCall() {
			return GetRuleContext<NativeCallContext>(0);
		}
		public NtvCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterNtvCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitNtvCall(this);
		}
	}
	public partial class PrimaryValueContext : ExpressionContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterPrimaryValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitPrimaryValue(this);
		}
	}
	public partial class UnaryExprContext : ExpressionContext {
		public IToken prefix;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
	}
	public partial class CtorCallContext : ExpressionContext {
		public ConstructorCallContext constructorCall() {
			return GetRuleContext<ConstructorCallContext>(0);
		}
		public CtorCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitCtorCall(this);
		}
	}
	public partial class MetCallContext : ExpressionContext {
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public MetCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterMetCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitMetCall(this);
		}
	}
	public partial class BinaryExprContext : ExpressionContext {
		public ExpressionContext left;
		public IToken bop;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterBinaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitBinaryExpr(this);
		}
	}
	public partial class FieldAccessorContext : ExpressionContext {
		public IToken bop;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public FieldAccessorContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterFieldAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitFieldAccessor(this);
		}
	}
	public partial class MethodAccessorContext : ExpressionContext {
		public IToken bop;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public MethodAccessorContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterMethodAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitMethodAccessor(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				_localctx = new MetCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 187; methodCall();
				}
				break;

			case 2:
				{
				_localctx = new NtvCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 188; nativeCall();
				}
				break;

			case 3:
				{
				_localctx = new CtorCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 189; constructorCall();
				}
				break;

			case 4:
				{
				_localctx = new PrimaryValueContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 190; primary();
				}
				break;

			case 5:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 191;
				((UnaryExprContext)_localctx).prefix = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ADD || _la==SUB) ) {
					((UnaryExprContext)_localctx).prefix = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 192; expression(8);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 232;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 230;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 195;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 196;
						((BinaryExprContext)_localctx).bop = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((BinaryExprContext)_localctx).bop = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 197; ((BinaryExprContext)_localctx).right = expression(8);
						}
						break;

					case 2:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 198;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 199;
						((BinaryExprContext)_localctx).bop = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((BinaryExprContext)_localctx).bop = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 200; ((BinaryExprContext)_localctx).right = expression(7);
						}
						break;

					case 3:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 201;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 209;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
						case 1:
							{
							State = 202; Match(LT);
							State = 203; Match(LT);
							}
							break;

						case 2:
							{
							State = 204; Match(GT);
							State = 205; Match(GT);
							State = 206; Match(GT);
							}
							break;

						case 3:
							{
							State = 207; Match(GT);
							State = 208; Match(GT);
							}
							break;
						}
						State = 211; ((BinaryExprContext)_localctx).right = expression(6);
						}
						break;

					case 4:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 212;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 213;
						((BinaryExprContext)_localctx).bop = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LE) | (1L << GE) | (1L << GT) | (1L << LT))) != 0)) ) {
							((BinaryExprContext)_localctx).bop = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 214; ((BinaryExprContext)_localctx).right = expression(5);
						}
						break;

					case 5:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 215;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 216;
						((BinaryExprContext)_localctx).bop = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
							((BinaryExprContext)_localctx).bop = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 217; ((BinaryExprContext)_localctx).right = expression(4);
						}
						break;

					case 6:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 218;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 219; ((BinaryExprContext)_localctx).bop = Match(AND);
						State = 220; ((BinaryExprContext)_localctx).right = expression(3);
						}
						break;

					case 7:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 221;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 222; ((BinaryExprContext)_localctx).bop = Match(OR);
						State = 223; ((BinaryExprContext)_localctx).right = expression(2);
						}
						break;

					case 8:
						{
						_localctx = new MethodAccessorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 224;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 225; ((MethodAccessorContext)_localctx).bop = Match(DOT);
						State = 226; methodCall();
						}
						break;

					case 9:
						{
						_localctx = new FieldAccessorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 227;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 228; ((FieldAccessorContext)_localctx).bop = Match(DOT);
						State = 229; Match(IDENTIFIER);
						}
						break;
					}
					} 
				}
				State = 234;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public TypeTypeOrUnitContext typeTypeOrUnit() {
			return GetRuleContext<TypeTypeOrUnitContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_methodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; typeTypeOrUnit();
			State = 236; Match(IDENTIFIER);
			State = 237; formalParameters();
			State = 238; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeOrUnitContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode UNIT() { return GetToken(NovaParser.UNIT, 0); }
		public TypeTypeOrUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTypeOrUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterTypeTypeOrUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitTypeTypeOrUnit(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeOrUnitContext typeTypeOrUnit() {
		TypeTypeOrUnitContext _localctx = new TypeTypeOrUnitContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_typeTypeOrUnit);
		try {
			State = 242;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DOUBLE:
			case FLOAT:
			case INT:
			case SHORT:
			case STRING:
			case BOOLEAN:
			case CHAR:
			case BYTE:
			case LONG:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 240; typeType();
				}
				break;
			case UNIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241; Match(UNIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(LPAREN);
			State = 246;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << SHORT) | (1L << STRING) | (1L << BOOLEAN) | (1L << CHAR) | (1L << BYTE) | (1L << LONG) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 245; formalParameterList();
				}
			}

			State = 248; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 263;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250; formalParameter();
				State = 255;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 251; Match(COMMA);
						State = 252; formalParameter();
						}
						} 
					}
					State = 257;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
				}
				State = 260;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 258; Match(COMMA);
					State = 259; lastFormalParameter();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_formalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; typeType();
			State = 266; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_lastFormalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; typeType();
			State = 269; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public BlockContext constructorBody;
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_constructorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(NEW);
			State = 272; Match(IDENTIFIER);
			State = 273; formalParameters();
			State = 274; _localctx.constructorBody = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(LBRACE);
			State = 282;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UNIT) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << SHORT) | (1L << STRING) | (1L << BOOLEAN) | (1L << CHAR) | (1L << BYTE) | (1L << LONG) | (1L << FOR) | (1L << IF) | (1L << WHILE) | (1L << RETURN) | (1L << NEW) | (1L << NATIVE) | (1L << ADD) | (1L << SUB) | (1L << LPAREN) | (1L << LBRACE) | (1L << NULL_LITERAL) | (1L << BOOL_LITERAL) | (1L << IDENTIFIER) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL))) != 0)) {
				{
				{
				State = 279; statement();
				}
				}
				State = 284;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 285; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_localVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; typeType();
			State = 288; variableDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext blockLabel;
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public AssignationStatementContext assignationStatement() {
			return GetRuleContext<AssignationStatementContext>(0);
		}
		public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_statement);
		try {
			State = 298;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290; _localctx.blockLabel = block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291; localVariableDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 292; ifStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 293; forStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 294; whileStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 295; returnStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 296; assignationStatement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 297; statementExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(NovaParser.WHILE, 0); }
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(WHILE);
			State = 301; parExpression();
			State = 302; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(NovaParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(RETURN);
			State = 306;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				State = 305; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignationStatementContext : ParserRuleContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterAssignationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitAssignationStatement(this);
		}
	}

	[RuleVersion(0)]
	public AssignationStatementContext assignationStatement() {
		AssignationStatementContext _localctx = new AssignationStatementContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_assignationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; _localctx.left = expression(0);
			State = 309; Match(ASSIGN);
			State = 310; _localctx.right = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterStatementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitStatementExpression(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_statementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public StatementContext ifSt;
		public StatementContext elseSt;
		public ITerminalNode IF() { return GetToken(NovaParser.IF, 0); }
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(NovaParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(IF);
			State = 315; parExpression();
			State = 316; _localctx.ifSt = statement();
			State = 319;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 317; Match(ELSE);
				State = 318; _localctx.elseSt = statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(NovaParser.FOR, 0); }
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(FOR);
			State = 322; Match(LPAREN);
			State = 323; forControl();
			State = 324; Match(RPAREN);
			State = 325; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(LPAREN);
			State = 328; expression(0);
			State = 329; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public StatementContext forInit;
		public ExpressionContext forCond;
		public AssignationStatementContext forUpdate;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignationStatementContext assignationStatement() {
			return GetRuleContext<AssignationStatementContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_forControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; _localctx.forInit = statement();
			State = 332; Match(SEMI);
			State = 333; _localctx.forCond = expression(0);
			State = 334; Match(SEMI);
			State = 335; _localctx.forUpdate = assignationStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(NovaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NovaParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; expression(0);
			State = 342;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 338; Match(COMMA);
				State = 339; expression(0);
				}
				}
				State = 344;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExprContext : PrimaryContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExprContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpr(this);
		}
	}
	public partial class PrimarylitContext : PrimaryContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public PrimarylitContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterPrimarylit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitPrimarylit(this);
		}
	}
	public partial class LitIdentContext : PrimaryContext {
		public PrimaryIdentifierContext primaryIdentifier() {
			return GetRuleContext<PrimaryIdentifierContext>(0);
		}
		public LitIdentContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterLitIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitLitIdent(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_primary);
		try {
			State = 351;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LPAREN:
				_localctx = new PrimaryExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 345; Match(LPAREN);
				State = 346; expression(0);
				State = 347; Match(RPAREN);
				}
				break;
			case NULL_LITERAL:
			case BOOL_LITERAL:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
				_localctx = new PrimarylitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 349; literal();
				}
				break;
			case UNIT:
			case DOUBLE:
			case FLOAT:
			case INT:
			case SHORT:
			case STRING:
			case BOOLEAN:
			case CHAR:
			case BYTE:
			case LONG:
			case IDENTIFIER:
				_localctx = new LitIdentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 350; primaryIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryIdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public PrimitiveTypeOrUnitContext primitiveTypeOrUnit() {
			return GetRuleContext<PrimitiveTypeOrUnitContext>(0);
		}
		public PrimaryIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterPrimaryIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitPrimaryIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryIdentifierContext primaryIdentifier() {
		PrimaryIdentifierContext _localctx = new PrimaryIdentifierContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_primaryIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				{
				State = 353; Match(IDENTIFIER);
				}
				break;
			case UNIT:
			case DOUBLE:
			case FLOAT:
			case INT:
			case SHORT:
			case STRING:
			case BOOLEAN:
			case CHAR:
			case BYTE:
			case LONG:
				{
				State = 354; primitiveTypeOrUnit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringContext : LiteralContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(NovaParser.STRING_LITERAL, 0); }
		public StringContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}
	public partial class BoolContext : LiteralContext {
		public ITerminalNode BOOL_LITERAL() { return GetToken(NovaParser.BOOL_LITERAL, 0); }
		public BoolContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
	}
	public partial class NullContext : LiteralContext {
		public ITerminalNode NULL_LITERAL() { return GetToken(NovaParser.NULL_LITERAL, 0); }
		public NullContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitNull(this);
		}
	}
	public partial class CharContext : LiteralContext {
		public ITerminalNode CHAR_LITERAL() { return GetToken(NovaParser.CHAR_LITERAL, 0); }
		public CharContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitChar(this);
		}
	}
	public partial class FloatContext : LiteralContext {
		public FloatLiteralContext floatLiteral() {
			return GetRuleContext<FloatLiteralContext>(0);
		}
		public FloatContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
	}
	public partial class IntContext : LiteralContext {
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public IntContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_literal);
		try {
			State = 363;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 357; integerLiteral();
				}
				break;
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
				_localctx = new FloatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 358; floatLiteral();
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CharContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 359; Match(CHAR_LITERAL);
				}
				break;
			case STRING_LITERAL:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 360; Match(STRING_LITERAL);
				}
				break;
			case BOOL_LITERAL:
				_localctx = new BoolContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 361; Match(BOOL_LITERAL);
				}
				break;
			case NULL_LITERAL:
				_localctx = new NullContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 362; Match(NULL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(NovaParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode HEX_LITERAL() { return GetToken(NovaParser.HEX_LITERAL, 0); }
		public ITerminalNode OCT_LITERAL() { return GetToken(NovaParser.OCT_LITERAL, 0); }
		public ITerminalNode BINARY_LITERAL() { return GetToken(NovaParser.BINARY_LITERAL, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_integerLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatLiteralContext : ParserRuleContext {
		public ITerminalNode FLOAT_LITERAL() { return GetToken(NovaParser.FLOAT_LITERAL, 0); }
		public ITerminalNode HEX_FLOAT_LITERAL() { return GetToken(NovaParser.HEX_FLOAT_LITERAL, 0); }
		public FloatLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
	}

	[RuleVersion(0)]
	public FloatLiteralContext floatLiteral() {
		FloatLiteralContext _localctx = new FloatLiteralContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_floatLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			_la = _input.La(1);
			if ( !(_la==FLOAT_LITERAL || _la==HEX_FLOAT_LITERAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; Match(IDENTIFIER);
			State = 370; Match(LPAREN);
			State = 372;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UNIT) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << SHORT) | (1L << STRING) | (1L << BOOLEAN) | (1L << CHAR) | (1L << BYTE) | (1L << LONG) | (1L << NEW) | (1L << NATIVE) | (1L << ADD) | (1L << SUB) | (1L << LPAREN) | (1L << NULL_LITERAL) | (1L << BOOL_LITERAL) | (1L << IDENTIFIER) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL))) != 0)) {
				{
				State = 371; expressionList();
				}
			}

			State = 374; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorCallContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(NovaParser.NEW, 0); }
		public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		public ConstructorCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterConstructorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitConstructorCall(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorCallContext constructorCall() {
		ConstructorCallContext _localctx = new ConstructorCallContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_constructorCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376; Match(NEW);
			State = 377; creator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public NativeCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterNativeCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitNativeCall(this);
		}
	}

	[RuleVersion(0)]
	public NativeCallContext nativeCall() {
		NativeCallContext _localctx = new NativeCallContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_nativeCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(NATIVE);
			State = 380; Match(IDENTIFIER);
			State = 381; Match(LPAREN);
			State = 383;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UNIT) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << SHORT) | (1L << STRING) | (1L << BOOLEAN) | (1L << CHAR) | (1L << BYTE) | (1L << LONG) | (1L << NEW) | (1L << NATIVE) | (1L << ADD) | (1L << SUB) | (1L << LPAREN) | (1L << NULL_LITERAL) | (1L << BOOL_LITERAL) | (1L << IDENTIFIER) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL))) != 0)) {
				{
				State = 382; expressionList();
				}
			}

			State = 385; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterCreator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitCreator(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_creator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; createdName();
			{
			State = 388; classCreatorRest();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NovaParser.IDENTIFIER, 0); }
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterCreatedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitCreatedName(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_createdName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterClassCreatorRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitClassCreatorRest(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INovaParserListener typedListener = listener as INovaParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; Match(LPAREN);
			State = 396;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UNIT) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << SHORT) | (1L << STRING) | (1L << BOOLEAN) | (1L << CHAR) | (1L << BYTE) | (1L << LONG) | (1L << NEW) | (1L << NATIVE) | (1L << ADD) | (1L << SUB) | (1L << LPAREN) | (1L << NULL_LITERAL) | (1L << BOOL_LITERAL) | (1L << IDENTIFIER) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL))) != 0)) {
				{
				State = 395; expressionList();
				}
			}

			State = 398; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 7);

		case 1: return Precpred(_ctx, 6);

		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);

		case 4: return Precpred(_ctx, 3);

		case 5: return Precpred(_ctx, 2);

		case 6: return Precpred(_ctx, 1);

		case 7: return Precpred(_ctx, 13);

		case 8: return Precpred(_ctx, 12);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3=\x193\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x3\x2\a\x2j\n\x2\f\x2\xE\x2m\v\x2\x3"+
		"\x2\a\x2p\n\x2\f\x2\xE\x2s\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x5\x5\x83\n\x5\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\a\t"+
		"\x93\n\t\f\t\xE\t\x96\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x5\n\xA1\n\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x5"+
		"\xE\xAD\n\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x5\x11\xB5\n\x11"+
		"\x3\x12\x3\x12\x5\x12\xB9\n\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x5\x14\xC4\n\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x5\x14\xD4\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\a\x14\xE9\n\x14\f\x14\xE\x14\xEC\v\x14\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x16\x3\x16\x5\x16\xF5\n\x16\x3\x17\x3\x17\x5\x17\xF9"+
		"\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\a\x18\x100\n\x18\f\x18\xE\x18"+
		"\x103\v\x18\x3\x18\x3\x18\x5\x18\x107\n\x18\x3\x18\x5\x18\x10A\n\x18\x3"+
		"\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\a\x1D\x11B\n\x1D\f\x1D\xE\x1D\x11E\v"+
		"\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x12D\n\x1F\x3 \x3 \x3 \x3 \x3!\x3!\x5"+
		"!\x135\n!\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x5$\x142\n$"+
		"\x3%\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'"+
		"\x3(\x3(\x3(\a(\x157\n(\f(\xE(\x15A\v(\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x162"+
		"\n)\x3*\x3*\x5*\x166\n*\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x16E\n+\x3,\x3,\x3"+
		"-\x3-\x3.\x3.\x3.\x5.\x177\n.\x3.\x3.\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\x5\x30\x182\n\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x32\x3"+
		"\x32\x3\x33\x3\x33\x3\x34\x3\x34\x5\x34\x18F\n\x34\x3\x34\x3\x34\x3\x34"+
		"\x2\x2\x3&\x35\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2"+
		"\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46"+
		"\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2"+
		"\x66\x2\x2\n\x3\x2\x6\a\x3\x2\n\x12\x3\x2\x1B\x1C\x3\x2\x1D\x1E\x3\x2"+
		"\x1F\"\x3\x2#$\x3\x2\x36\x39\x3\x2:;\x193\x2k\x3\x2\x2\x2\x4v\x3\x2\x2"+
		"\x2\x6{\x3\x2\x2\x2\b\x82\x3\x2\x2\x2\n\x84\x3\x2\x2\x2\f\x88\x3\x2\x2"+
		"\x2\xE\x8C\x3\x2\x2\x2\x10\x90\x3\x2\x2\x2\x12\xA0\x3\x2\x2\x2\x14\xA2"+
		"\x3\x2\x2\x2\x16\xA4\x3\x2\x2\x2\x18\xA6\x3\x2\x2\x2\x1A\xA9\x3\x2\x2"+
		"\x2\x1C\xAE\x3\x2\x2\x2\x1E\xB0\x3\x2\x2\x2 \xB4\x3\x2\x2\x2\"\xB8\x3"+
		"\x2\x2\x2$\xBA\x3\x2\x2\x2&\xC3\x3\x2\x2\x2(\xED\x3\x2\x2\x2*\xF4\x3\x2"+
		"\x2\x2,\xF6\x3\x2\x2\x2.\x109\x3\x2\x2\x2\x30\x10B\x3\x2\x2\x2\x32\x10E"+
		"\x3\x2\x2\x2\x34\x111\x3\x2\x2\x2\x36\x116\x3\x2\x2\x2\x38\x118\x3\x2"+
		"\x2\x2:\x121\x3\x2\x2\x2<\x12C\x3\x2\x2\x2>\x12E\x3\x2\x2\x2@\x132\x3"+
		"\x2\x2\x2\x42\x136\x3\x2\x2\x2\x44\x13A\x3\x2\x2\x2\x46\x13C\x3\x2\x2"+
		"\x2H\x143\x3\x2\x2\x2J\x149\x3\x2\x2\x2L\x14D\x3\x2\x2\x2N\x153\x3\x2"+
		"\x2\x2P\x161\x3\x2\x2\x2R\x165\x3\x2\x2\x2T\x16D\x3\x2\x2\x2V\x16F\x3"+
		"\x2\x2\x2X\x171\x3\x2\x2\x2Z\x173\x3\x2\x2\x2\\\x17A\x3\x2\x2\x2^\x17D"+
		"\x3\x2\x2\x2`\x185\x3\x2\x2\x2\x62\x188\x3\x2\x2\x2\x64\x18A\x3\x2\x2"+
		"\x2\x66\x18C\x3\x2\x2\x2hj\x5\x4\x3\x2ih\x3\x2\x2\x2jm\x3\x2\x2\x2ki\x3"+
		"\x2\x2\x2kl\x3\x2\x2\x2lq\x3\x2\x2\x2mk\x3\x2\x2\x2np\x5\b\x5\x2on\x3"+
		"\x2\x2\x2ps\x3\x2\x2\x2qo\x3\x2\x2\x2qr\x3\x2\x2\x2rt\x3\x2\x2\x2sq\x3"+
		"\x2\x2\x2tu\a\x2\x2\x3u\x3\x3\x2\x2\x2vw\a\x3\x2\x2wx\a\"\x2\x2xy\x5\x6"+
		"\x4\x2yz\a!\x2\x2z\x5\x3\x2\x2\x2{|\a\x32\x2\x2|}\a.\x2\x2}~\a\x32\x2"+
		"\x2~\a\x3\x2\x2\x2\x7F\x83\x5\f\a\x2\x80\x83\x5\xE\b\x2\x81\x83\x5\n\x6"+
		"\x2\x82\x7F\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x81\x3\x2\x2\x2\x83\t"+
		"\x3\x2\x2\x2\x84\x85\a\b\x2\x2\x85\x86\x5\"\x12\x2\x86\x87\x5\x10\t\x2"+
		"\x87\v\x3\x2\x2\x2\x88\x89\a\x4\x2\x2\x89\x8A\a\x32\x2\x2\x8A\x8B\x5\x10"+
		"\t\x2\x8B\r\x3\x2\x2\x2\x8C\x8D\a\x5\x2\x2\x8D\x8E\a\x32\x2\x2\x8E\x8F"+
		"\x5\x10\t\x2\x8F\xF\x3\x2\x2\x2\x90\x94\a)\x2\x2\x91\x93\x5\x12\n\x2\x92"+
		"\x91\x3\x2\x2\x2\x93\x96\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2\x94\x95\x3\x2"+
		"\x2\x2\x95\x97\x3\x2\x2\x2\x96\x94\x3\x2\x2\x2\x97\x98\a*\x2\x2\x98\x11"+
		"\x3\x2\x2\x2\x99\x9A\x5\x14\v\x2\x9A\x9B\x5(\x15\x2\x9B\xA1\x3\x2\x2\x2"+
		"\x9C\x9D\x5\x14\v\x2\x9D\x9E\x5\x18\r\x2\x9E\xA1\x3\x2\x2\x2\x9F\xA1\x5"+
		"\x34\x1B\x2\xA0\x99\x3\x2\x2\x2\xA0\x9C\x3\x2\x2\x2\xA0\x9F\x3\x2\x2\x2"+
		"\xA1\x13\x3\x2\x2\x2\xA2\xA3\x5\x16\f\x2\xA3\x15\x3\x2\x2\x2\xA4\xA5\t"+
		"\x2\x2\x2\xA5\x17\x3\x2\x2\x2\xA6\xA7\x5 \x11\x2\xA7\xA8\x5\x1A\xE\x2"+
		"\xA8\x19\x3\x2\x2\x2\xA9\xAC\x5\x1E\x10\x2\xAA\xAB\a\x1A\x2\x2\xAB\xAD"+
		"\x5\x1C\xF\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\x1B\x3\x2\x2"+
		"\x2\xAE\xAF\x5&\x14\x2\xAF\x1D\x3\x2\x2\x2\xB0\xB1\a\x32\x2\x2\xB1\x1F"+
		"\x3\x2\x2\x2\xB2\xB5\a\x32\x2\x2\xB3\xB5\x5$\x13\x2\xB4\xB2\x3\x2\x2\x2"+
		"\xB4\xB3\x3\x2\x2\x2\xB5!\x3\x2\x2\x2\xB6\xB9\x5$\x13\x2\xB7\xB9\a\t\x2"+
		"\x2\xB8\xB6\x3\x2\x2\x2\xB8\xB7\x3\x2\x2\x2\xB9#\x3\x2\x2\x2\xBA\xBB\t"+
		"\x3\x2\x2\xBB%\x3\x2\x2\x2\xBC\xBD\b\x14\x1\x2\xBD\xC4\x5Z.\x2\xBE\xC4"+
		"\x5^\x30\x2\xBF\xC4\x5\\/\x2\xC0\xC4\x5P)\x2\xC1\xC2\t\x4\x2\x2\xC2\xC4"+
		"\x5&\x14\n\xC3\xBC\x3\x2\x2\x2\xC3\xBE\x3\x2\x2\x2\xC3\xBF\x3\x2\x2\x2"+
		"\xC3\xC0\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC4\xEA\x3\x2\x2\x2\xC5\xC6\f"+
		"\t\x2\x2\xC6\xC7\t\x5\x2\x2\xC7\xE9\x5&\x14\n\xC8\xC9\f\b\x2\x2\xC9\xCA"+
		"\t\x4\x2\x2\xCA\xE9\x5&\x14\t\xCB\xD3\f\a\x2\x2\xCC\xCD\a\"\x2\x2\xCD"+
		"\xD4\a\"\x2\x2\xCE\xCF\a!\x2\x2\xCF\xD0\a!\x2\x2\xD0\xD4\a!\x2\x2\xD1"+
		"\xD2\a!\x2\x2\xD2\xD4\a!\x2\x2\xD3\xCC\x3\x2\x2\x2\xD3\xCE\x3\x2\x2\x2"+
		"\xD3\xD1\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xE9\x5&\x14\b\xD6\xD7\f\x6"+
		"\x2\x2\xD7\xD8\t\x6\x2\x2\xD8\xE9\x5&\x14\a\xD9\xDA\f\x5\x2\x2\xDA\xDB"+
		"\t\a\x2\x2\xDB\xE9\x5&\x14\x6\xDC\xDD\f\x4\x2\x2\xDD\xDE\a%\x2\x2\xDE"+
		"\xE9\x5&\x14\x5\xDF\xE0\f\x3\x2\x2\xE0\xE1\a&\x2\x2\xE1\xE9\x5&\x14\x4"+
		"\xE2\xE3\f\xF\x2\x2\xE3\xE4\a.\x2\x2\xE4\xE9\x5Z.\x2\xE5\xE6\f\xE\x2\x2"+
		"\xE6\xE7\a.\x2\x2\xE7\xE9\a\x32\x2\x2\xE8\xC5\x3\x2\x2\x2\xE8\xC8\x3\x2"+
		"\x2\x2\xE8\xCB\x3\x2\x2\x2\xE8\xD6\x3\x2\x2\x2\xE8\xD9\x3\x2\x2\x2\xE8"+
		"\xDC\x3\x2\x2\x2\xE8\xDF\x3\x2\x2\x2\xE8\xE2\x3\x2\x2\x2\xE8\xE5\x3\x2"+
		"\x2\x2\xE9\xEC\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB"+
		"\'\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xED\xEE\x5*\x16\x2\xEE\xEF\a\x32\x2"+
		"\x2\xEF\xF0\x5,\x17\x2\xF0\xF1\x5\x36\x1C\x2\xF1)\x3\x2\x2\x2\xF2\xF5"+
		"\x5 \x11\x2\xF3\xF5\a\t\x2\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF3\x3\x2\x2\x2"+
		"\xF5+\x3\x2\x2\x2\xF6\xF8\a\'\x2\x2\xF7\xF9\x5.\x18\x2\xF8\xF7\x3\x2\x2"+
		"\x2\xF8\xF9\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\xFB\a(\x2\x2\xFB-\x3\x2"+
		"\x2\x2\xFC\x101\x5\x30\x19\x2\xFD\xFE\a-\x2\x2\xFE\x100\x5\x30\x19\x2"+
		"\xFF\xFD\x3\x2\x2\x2\x100\x103\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x101\x102"+
		"\x3\x2\x2\x2\x102\x106\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x104\x105\a-"+
		"\x2\x2\x105\x107\x5\x32\x1A\x2\x106\x104\x3\x2\x2\x2\x106\x107\x3\x2\x2"+
		"\x2\x107\x10A\x3\x2\x2\x2\x108\x10A\x5\x32\x1A\x2\x109\xFC\x3\x2\x2\x2"+
		"\x109\x108\x3\x2\x2\x2\x10A/\x3\x2\x2\x2\x10B\x10C\x5 \x11\x2\x10C\x10D"+
		"\x5\x1E\x10\x2\x10D\x31\x3\x2\x2\x2\x10E\x10F\x5 \x11\x2\x10F\x110\x5"+
		"\x1E\x10\x2\x110\x33\x3\x2\x2\x2\x111\x112\a\x18\x2\x2\x112\x113\a\x32"+
		"\x2\x2\x113\x114\x5,\x17\x2\x114\x115\x5\x38\x1D\x2\x115\x35\x3\x2\x2"+
		"\x2\x116\x117\x5\x38\x1D\x2\x117\x37\x3\x2\x2\x2\x118\x11C\a)\x2\x2\x119"+
		"\x11B\x5<\x1F\x2\x11A\x119\x3\x2\x2\x2\x11B\x11E\x3\x2\x2\x2\x11C\x11A"+
		"\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11F\x3\x2\x2\x2\x11E\x11C\x3"+
		"\x2\x2\x2\x11F\x120\a*\x2\x2\x120\x39\x3\x2\x2\x2\x121\x122\x5 \x11\x2"+
		"\x122\x123\x5\x1A\xE\x2\x123;\x3\x2\x2\x2\x124\x12D\x5\x38\x1D\x2\x125"+
		"\x12D\x5:\x1E\x2\x126\x12D\x5\x46$\x2\x127\x12D\x5H%\x2\x128\x12D\x5>"+
		" \x2\x129\x12D\x5@!\x2\x12A\x12D\x5\x42\"\x2\x12B\x12D\x5\x44#\x2\x12C"+
		"\x124\x3\x2\x2\x2\x12C\x125\x3\x2\x2\x2\x12C\x126\x3\x2\x2\x2\x12C\x127"+
		"\x3\x2\x2\x2\x12C\x128\x3\x2\x2\x2\x12C\x129\x3\x2\x2\x2\x12C\x12A\x3"+
		"\x2\x2\x2\x12C\x12B\x3\x2\x2\x2\x12D=\x3\x2\x2\x2\x12E\x12F\a\x15\x2\x2"+
		"\x12F\x130\x5J&\x2\x130\x131\x5<\x1F\x2\x131?\x3\x2\x2\x2\x132\x134\a"+
		"\x17\x2\x2\x133\x135\x5&\x14\x2\x134\x133\x3\x2\x2\x2\x134\x135\x3\x2"+
		"\x2\x2\x135\x41\x3\x2\x2\x2\x136\x137\x5&\x14\x2\x137\x138\a\x1A\x2\x2"+
		"\x138\x139\x5&\x14\x2\x139\x43\x3\x2\x2\x2\x13A\x13B\x5&\x14\x2\x13B\x45"+
		"\x3\x2\x2\x2\x13C\x13D\a\x14\x2\x2\x13D\x13E\x5J&\x2\x13E\x141\x5<\x1F"+
		"\x2\x13F\x140\a\x16\x2\x2\x140\x142\x5<\x1F\x2\x141\x13F\x3\x2\x2\x2\x141"+
		"\x142\x3\x2\x2\x2\x142G\x3\x2\x2\x2\x143\x144\a\x13\x2\x2\x144\x145\a"+
		"\'\x2\x2\x145\x146\x5L\'\x2\x146\x147\a(\x2\x2\x147\x148\x5<\x1F\x2\x148"+
		"I\x3\x2\x2\x2\x149\x14A\a\'\x2\x2\x14A\x14B\x5&\x14\x2\x14B\x14C\a(\x2"+
		"\x2\x14CK\x3\x2\x2\x2\x14D\x14E\x5<\x1F\x2\x14E\x14F\a/\x2\x2\x14F\x150"+
		"\x5&\x14\x2\x150\x151\a/\x2\x2\x151\x152\x5\x42\"\x2\x152M\x3\x2\x2\x2"+
		"\x153\x158\x5&\x14\x2\x154\x155\a-\x2\x2\x155\x157\x5&\x14\x2\x156\x154"+
		"\x3\x2\x2\x2\x157\x15A\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2\x158\x159\x3"+
		"\x2\x2\x2\x159O\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15B\x15C\a\'\x2\x2"+
		"\x15C\x15D\x5&\x14\x2\x15D\x15E\a(\x2\x2\x15E\x162\x3\x2\x2\x2\x15F\x162"+
		"\x5T+\x2\x160\x162\x5R*\x2\x161\x15B\x3\x2\x2\x2\x161\x15F\x3\x2\x2\x2"+
		"\x161\x160\x3\x2\x2\x2\x162Q\x3\x2\x2\x2\x163\x166\a\x32\x2\x2\x164\x166"+
		"\x5\"\x12\x2\x165\x163\x3\x2\x2\x2\x165\x164\x3\x2\x2\x2\x166S\x3\x2\x2"+
		"\x2\x167\x16E\x5V,\x2\x168\x16E\x5X-\x2\x169\x16E\a<\x2\x2\x16A\x16E\a"+
		"=\x2\x2\x16B\x16E\a\x31\x2\x2\x16C\x16E\a\x30\x2\x2\x16D\x167\x3\x2\x2"+
		"\x2\x16D\x168\x3\x2\x2\x2\x16D\x169\x3\x2\x2\x2\x16D\x16A\x3\x2\x2\x2"+
		"\x16D\x16B\x3\x2\x2\x2\x16D\x16C\x3\x2\x2\x2\x16EU\x3\x2\x2\x2\x16F\x170"+
		"\t\b\x2\x2\x170W\x3\x2\x2\x2\x171\x172\t\t\x2\x2\x172Y\x3\x2\x2\x2\x173"+
		"\x174\a\x32\x2\x2\x174\x176\a\'\x2\x2\x175\x177\x5N(\x2\x176\x175\x3\x2"+
		"\x2\x2\x176\x177\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x179\a(\x2\x2"+
		"\x179[\x3\x2\x2\x2\x17A\x17B\a\x18\x2\x2\x17B\x17C\x5`\x31\x2\x17C]\x3"+
		"\x2\x2\x2\x17D\x17E\a\x19\x2\x2\x17E\x17F\a\x32\x2\x2\x17F\x181\a\'\x2"+
		"\x2\x180\x182\x5N(\x2\x181\x180\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182"+
		"\x183\x3\x2\x2\x2\x183\x184\a(\x2\x2\x184_\x3\x2\x2\x2\x185\x186\x5\x62"+
		"\x32\x2\x186\x187\x5\x64\x33\x2\x187\x61\x3\x2\x2\x2\x188\x189\a\x32\x2"+
		"\x2\x189\x63\x3\x2\x2\x2\x18A\x18B\x5\x66\x34\x2\x18B\x65\x3\x2\x2\x2"+
		"\x18C\x18E\a\'\x2\x2\x18D\x18F\x5N(\x2\x18E\x18D\x3\x2\x2\x2\x18E\x18F"+
		"\x3\x2\x2\x2\x18F\x190\x3\x2\x2\x2\x190\x191\a(\x2\x2\x191g\x3\x2\x2\x2"+
		"\x1Ekq\x82\x94\xA0\xAC\xB4\xB8\xC3\xD3\xE8\xEA\xF4\xF8\x101\x106\x109"+
		"\x11C\x12C\x134\x141\x158\x161\x165\x16D\x176\x181\x18E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
