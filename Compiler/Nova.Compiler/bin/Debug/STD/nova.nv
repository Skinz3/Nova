

class Nova
{
    public void Print(string s)
    {
		~Print(s)
    }
    public string ReadLine()
    {
		return ~Readl()
    }
}

struct Vector
{
	private NativeVect NativeVect

	-> Vector(NativeVect nativeVector)
	{
		NativeVect = nativeVector
	}

    public void Add(int value)
    {
		~AddVect(NativeVect,value)
    }
	public Unknown At(int index)
	{
		return ~AtVect(NativeVect,index)
	}
	public void Set(int index,int value)
	{
		~SetVect(NativeVect,index,value)
	}
	public void Reverse()
	{
		int n = Size()

		for (int i = 0; i < (n / 2); i = i + 1)
		{
			int tmp = At(i)
			Set(i,At(n - i - 1))
			Set(n - i - 1,  tmp)
		}
	}
	public void Print()
	{
		int size = Size()

		for (int i = 0;i < size;i = i + 1)
		{
			Nova.Print(At(i))

			if (i < size-1)
			{
				Nova.Print(",")
			}
		}
	}
	public int Size()
	{
		return ~GetVectSize(NativeVect)
	}
}
struct ListElement
{
	public ListElement Next
	public string Value 

}
struct List
{
	public ListElement Head
	public int Size

	public ListElement Current

	-> List()
	{
		Head = -> ListElement()
		Current = Head
		Size = 0
	}
	public void Add(string element)
	{
		if (Size == 0)
		{
		     Current.Value = element
		}
		else
		{
		    Current.Next = -> ListElement()
		    Current.Next.Value = element
		    Current = Current.Next
		}

		Size = Size + 1
	}
	public void Print()
	{
		ListElement current = Head

		int i = 0

		while (i < Size)
		{
			Nova.Print(current.Value)
			current = current.Next
			i = i + 1
		}
	}
}
